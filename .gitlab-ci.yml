# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml


image: kloiadocker/docker-compose:v1
services:
  - docker:dind
stages:
  - prepare
  - install
  - push
  - deploy
before_script:
  - export DOCKER_HOST=127.0.0.1:2375
  - apk add --no-cache make bash
  - mkdir -p ~/.aws /root/.aws
#  - echo -e "[<profile-name>]\nregion=eu-central-1" > ~/.aws/credentials
  - export COMMIT_TIME=$(git show -s --format=%ct $CI_COMMIT_SHA)
#  - eval $(aws ecr get-login --profile=<profile-name> --no-include-email)
#  - export CI_REGISTRY_IMAGE="<account-id>.dkr.ecr.eu-central-1.amazonaws.com/deneme"
prepare:
  stage: prepare
  script:
    - docker-compose stop
    - docker-compose rm -v
  tags:
    - run
install:
  stage: install
  script:
    - docker build -t deneme .
    - docker tag deneme bahadockerhub/deploy-test-app2
  tags:
    - run
#push:
#  stage: push
#  script:
#    - docker push <account-id>.dkr.ecr.eu-central-1.amazonaws.com/deneme:<tag>
#  allow_failure: true
#  tags:
#    - run
deploy:
  stage: deploy
  script:
    - docker-compose up
  only:
    - master
  tags:
    - run
  when: manual

push:
  stage: push
  script:
    - docker push bahadockerhub/deploy-test-app2

  tags:
    - run


newman_test:
  stage: test
  image:
    name: node:16-alpine
  script:
    - npm i -g newman
    - npm i -g newman-reporter-postman-cloud
    - newman run "https://api.getpostman.com/collections/22000525-e89a5855-577d-4241-9e3a-d479bec72335?apikey=PMAK-62dfe1d3c48d74156728bdf0-70a567e71570a30a79f15f7351f9d4bcd7"  --environment "https://api.getpostman.com/environments/22000525-413e2450-1bdf-4a1d-a1b8-fe8612ed9a88?apikey=PMAK-62dfe1d3c48d74156728bdf0-70a567e71570a30a79f15f7351f9d4bcd7" -r postman-cloud --reporter-apiKey "PMAK-62dfe1d3c48d74156728bdf0-70a567e71570a30a79f15f7351f9d4bcd7" --reporter-workspaceId "e2216f64-0c6a-44cf-844b-d1f0109c8401" --reporter-integrationIdentifier 119343-${CI_PIPELINE_ID}

deploy-job:      # This job runs in the deploying stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
